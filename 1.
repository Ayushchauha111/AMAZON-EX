ques1-Given a number x, and a row-wise and column-wise sorted matrix, check if x exists in the matrix or not.

	int matSearch (vector <vector <int>> &mat, int N, int M, int X)
	{
	    
	    int row=0;
	    int col=M-1;
	    while(row<N && col>=0)
	    {
	        if(mat[row][col]==X)
	        {
	            return 1;
	        }
	        else if(mat[row][col]>X)
	        {
	            col--;
	        }
	        else
	        {
	            row++;
	        }
	    }
	    return 0;
	}
};
################2nd imp
ques2-Given a linked list, create a copy of that linked list and return a pointer to the head of the new linked list. 
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==NULL)
             return NULL;
      Node* curr=head;
      Node* next=NULL;
     while(curr!=NULL)
     {
next=curr->next;
curr->next=new Node(curr->val);
curr->next->next=next;
curr=next;
     }
     curr=head;
     while(curr!=NULL)
     {
         curr->next->random=curr->random?curr->random->next:NULL;
         curr=curr->next->next;
         
     }
     Node* o=head;
     Node* c=head->next;
     Node* poi=c;
     while(o && c)
     {
         o->next=o->next->next?o->next->next:NULL;
         c->next=c->next?c->next->next:NULL;
         
         o=o->next;
         c=c->next;
     }
     
     
  return poi;
        
        
        
    }
};
ques3-
Did a detailed discussion on the project. The interviewer asked many technical details related to approach, implementation, results, etc, and non-technical questions like, “what was the most challenging part”. This took 30 minutes

ques4- Given a binary tree, Convert it to its mirror tree. I wrote a recursive function whose return type was void. The interviewer further asked to write one more solution, using a non-void return type function. Then a small discussion comparing both approaches, recursion-stack, worst and avg case time complexities, etc


 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==NULL)
             return root;
        
        TreeNode* left=invertTree(root->left);
        TreeNode* right=invertTree(root->right);
        root->left=right;
        root->right=left;
        return root;
        
        
    }
};

################## 1imp
ques5-Given a BST, a node value, and an integer K. Print all nodes which are at distance K from the given node. Nodes at distance K from a node can be in all 3 directions. The left path, the right path, path via parent. The interviewer further asked to do the same question for the Binary tree.
vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
        unordered_map<TreeNode*, TreeNode*> parent_track; // node -> parent
        unordered_map<TreeNode*, bool> visited;
        queue<TreeNode*> queue;
        queue.push(root);
        while(!queue.empty()) { /*First BFS to get a track of parent nodes*/
            TreeNode* current = queue.front(); queue.pop();
            if(current->left) {
                parent_track[current->left] = current;
                queue.push(current->left);
            }
            if(current->right) {
                parent_track[current->right] = current;
                queue.push(current->right);
            }
        }
        queue.push(target);
        visited[target] = true;
        int curr_level = 0;
        while(!queue.empty()) { /*Second BFS to go upto K level from target node and using our hashtable info*/
            int size = queue.size();
            if(curr_level++ == K) break;
            for(int i=0; i<size; i++) {
                TreeNode* current = queue.front(); queue.pop();
                if(current->left && !visited[current->left]) {
                    queue.push(current->left);
                    visited[current->left] = true;
                }
                if(current->right && !visited[current->right]) {
                    queue.push(current->right);
                    visited[current->right] = true;
                }
                if(parent_track[current] && !visited[parent_track[current]]) {
                    queue.push(parent_track[current]);
                    visited[parent_track[current]] = true;
                }
            }
        }
        vector<int> result;
        while(!queue.empty()) {
            TreeNode* current = queue.front(); queue.pop();
            result.push_back(current->val);
        }
        return result;
}
